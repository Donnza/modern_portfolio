PART 1: Intro & Sass Workflow Setup

terminal
    "mkdir project_name"
    "cd project_name"
    "code ."        open project in VScode
create dist folder
    folder incl files such as html, css, js, etc
create index.html file in dist folder
    type ! and enter tab to autocomplete HTML file
create scss folder
    work on sass workflow
    incl sass files
create main.scss file
    main sass file 
    every other sass file will be partials that we import into this file
node-sass
    need a way for our sass to be compiled into regular css because the browser doesnt read scss
    uses LibSass, the C version of the popular stylesheet preprocessor, very fast
    use npm to install node-sass => "npm install node-sass"
    before we install; need to create a package.json file; which is like a manifest for our project

    open terminal (ctrl + `); type "npm init"; follow steps
    anything installed throught npm will be put in the package.json file

    type "npm i node-sass" to install
        i = install;

Sass setup
    uses npm script 
    TEST
        change "test" script in package.json file
        from:   "scripts": {
                    "test": "echo \"Error: no test specified\" && exit 1"
                }

        to:     "sass": "echo \"Hello from sass script\""
        To run script open terminal type "npm run sass"

    "sass": "node-sass -w scss/ -o dist/css/ --recursive"
        node-sass       run node-sass
        -w scss/        watch the scss folder
        -o dist/css     output the compiled css file to dist/css/ (dont have to create dist/css/ folder) 
        --recursive     will have issues with partials and auto reload without recursive flag
    Terminal: npm run sass

main.sccs
    $primary-colour
        variables start with $
    dont touch main.css file that sass created
        work with main.scss file for styling with css
    Incl compiled version (main.css not main.scss) in the index.html file
        <link rel="stylesheet" href="css/main.css">

git repository
    open new terminal (+) and keep the npm terminal open
    create a file called .gitignore 
        touch .gitignore
            touch command creates a file
        windows powershell use "ni .gitignore"
            new-item .gitignore
    add "node-modules" to .gitignore file
        tells git to ignore node-modules folder
            no need to alter folder or upload to git
                node dependencies
    init git repository
        terminal: git init
            creates hidden .git folder
    terminal: git add .
        add . => add all files (. => all) 
    terminal: git commit -m 'Initial workflow setup'
        -m message/comment flag ??

PART 2: Homepage & Main Sass

homepage html markup
    HTML5 header tag
        menu
        overlay
    emmet ??
        btn-line*3  

    shift + alt + down
        copy lines down
    
    HTML5 main tag
        lg-heading = large heading
        sm-heading = small "
    fontawesome ??

    link to javascript in index.html file

core css    
    * {}
        box-sizing: border-box;
            border-box: padding on the inside doesnt effect width/height, be within the box model ??
    body {}
        height: 100%;
        margin: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
        line-height: 1.5;
            space between lines

    Headings:
    h1, h2, h3 {}
        margin: 0;
        font-weight: 400;
            font letter thickness
        sass nesting ??
            &.lg-heading {}
                font-size: 6rem;
                    rem => multiplier of default (16px)
                        change default rem size 
                            html {font-size: 10px;}
                    6rem = 6 * 16 = 96px
            &.sm-heading {}
                margin-bottom:2rem;
                padding: 0.2rem 1rem;
                background: rbga(lighten($primary-colour, 2) 0.5);
                    sass lighten() func ??
                        2 param
                            primary colour
                            how much to lighten by
                    sass rbga() func
                        make transparent
                        2 param
                            colour
                            opacity

    links
        a {}
            color: #fff;
                make colour white
            text-decoration: none
                remove links underline

    header
        header {}
            position: fixed
                always stay at top
            z-index: 2;
                always at front
            width: 100%
                streches across whole screen

    text-secondary
        create sass var
            $secondary-colour: #eece1a;
                yellow colour
        text-secondary {}
            color: $secondary-colour;

    main
        main {}
            padding: 4rem;
            height: 100%;
            nested sass: style icons
                .icons {}
                    margin-top: 1rem;
                        push down
                    nested sass: link
                        a {}
                            padding: 0.4rem;
                            nested sass: a hover
                                &:hover {}
                                    color: $secondary-colour;

CSS transitions
    transition: all 1s ease-out; ??
        all: what to transition e.g. colour
        1s: time it takes
        ease out: motion

    sass @mixin
        like func
            put at top
        @mixin easeOut {
            transition: all 1s ease-out;
        }
        to use
            @include nameOfMixin();
                e.g. @include easeOut();

homepage: id=homepage
    main {} nested  
        &#home {}
            overflow: hidden;
                no scroll bars
            nested h1
                h1 {}
                    margin-top: 20vh;
                        vh = viewpoint height
                            20vh = 20 out of the 100 slices the screen divided into
                            vw = similar
    create sass var
        $show-home-image = true;
        $home-image: url(.../img/background.jpg);
            create new folder in dist folder called img
                need
                    background.jpg
                    portrait
                    portrait-small
                    projects
        $background-opacity: 0.9;

    background image
        @mixin background {}
            @if $show-home-image {}
                &#bg-img {}
                    background: $home-image;
                    background-attachment: fixed; ??
                    background-size: cover;
                    METHOD1:    overlay
                        HTML: create overlay div at top body
                        .overlay {} //cover entire body
                            position: absolute;
                            top:0;
                            right:0;
                            width:100%;
                            height:100%;
                            z-index:-1;
                            background: rgba($primary-colour, $background-opacity);
                    METHOD2
                        pseudo-element after
                        &:after {}
                            content:''; // :before/:after need content but can leave empty ''
                            position: absolute;
                            top:0;
                            right:0;
                            width:100%;
                            height:100%;
                            z-index:-1;
                            background: rgba($primary-colour, $background-opacity);
        body {}
            @include background; //dont need parenthasies ??

create partial scss file for @mixin functions
    all partials should start with underscore _
    create file called _config.scss
    move all $var and @mixin func to _config.scss
    import config into main scss file   
        @import 'config';
            no underscore _
            no filetype scss

PART 3: Rotating Menu Button

git
    git add .
    git commit -m 'Index markup & main sass'

Menu
    create new sass file
        _menu.scss
    import _menu.scss into main.scss file   
        @import 'menu';
            after config
    
    _menu
        //Menu Button
        .menu-btn {}
            position: absolute;
                want to place where we want it to be in the corner
            z-index: 3;
                upfront, close
            right: 35px;
            top: 35px;
            cursor: pointer;
                hover over it => we want a cursor
            @include easeOut;
                css transition

            //btn lines
            btn-line {}     //only one line
                width: 28px;
                height: 3px;
                margin: 0 0 5px 0;
                    //top right bottom left
                    //space in between lines
                background: #fff;       //white
                @include easeOut;       //css transition

        JavaScript
        //when menu btn clicked add close class to menu-btn and show class to nav elements
        //main.js
            //select items from the DOM ??
            //Document Object model => UI Structure, HTML tags, attributes, etc

            //menu btn, menu overlay, nav list, nav items, branding
            //DOM Selection

                //Select DOM Items
                const menuBtn = document.querySelector('.menu-btn');
                    //document property ??
                    //.querySelector('.btn-menu') => select the class btn-menu
                const menu = document.querySelector('.menu');
                const menuNav = document.querySelector('.menu-nav');
                const menuBranding = document.querySelector('.menu-branding');

                //nav items
                    //more than one so cant use querySelector, will just grab the first one
                    //use querySelectorAll
                        //will take all those items and put them in a node list similar to array

                const navItems = document.querySelectorAll('.nav-item');

                // Set initial state of menu
                let showMenu = false;
                    //let => directly reassign var at certian times cant do that with const
                //need event listner, listen for click event
                menuBtn.addEventListener('click', toggleMenu);
                    'click' :   event to listen for
                    toggleMenu  :   function we need to write

                function toggleMenu() {
                    //check the state of show menu
                    if (!showMenu) {
                        //if menu is not shown, overlay, add classes to items
                        menuBtn.classList.add('close');
                        menu.classList.add('show');
                        menuNav.classList.add('show');
                        menuBranding.classList.add('show');

                        //navItems has more than one item so have to loop through them
                        navItems.forEach(item => item.classList.add("show"));
                            //item represents each item in the navItems obj

                        // Set Menu State
                        showMenu = true;
                    } else {
                        //do opposite of if above
                        //VScode shortcut: select add, ctrl + d * 3 to select all add and change to remove
                        menuBtn.classList.remove("close");
                        menu.classList.remove("show");
                        menuNav.classList.remove("show");
                        menuBranding.classList.remove("show");
                        navItems.forEach(item => item.classList.remove("show"));

                        // Set Menu State
                        showMenu = false;
                    }
                }
        
        //  _menu.scss
        .menu-btn {} 
            //  Rotate Into X With Menu Lines
            &.close {}
                transform: rotate(180deg);
                
                //hide line and turn rest into X
                .btn-line {}
                    //  Line 1 - Rotate
                    &:nth-child(1) {}
                        // want the first line
                        // use translate and transform to change line
                        transform: rotate(45deg) translate(5px, 5px);

                    //  Line 2 - Hide
                    &:nth-child(2) {}
                        opacity: 0;

                    //  Line 3 - Rotate
                    &:nth-child(3) {}
                        transform: rotate(-45deg) translate(7px, -6px);

git
    git add .
    git commit -m 'Menu button, javascript & rotate'

    ctrl + L to clear terminal

YouTube comment

        You can write the toggleMenu function much simpler using classList's toggle method: 
        function toggleMenu() {
            menuBtn.classList.toggle('close');
            menu.classList.toggle('show');
            menuNav.classList.toggle('show');
            menuBranding.classList.toggle('show');
            navItems.forEach(item => item.classList.toggle('show'));
            showMenu = !showMenu;
        }

        I just had to make the rotation menu button stay in the same place and tinkered a bit.  
        First you need to make the menu-btn box properly square by removing the bottom padding on the 3:rd line.
        in _menu.scss at the end of .btn-line add: &:nth-child(3) { margin: 0; };
        Then change the line 1 transform to:  transform: translate(0px, 8px) rotate(45deg);
        And the Line 3 transform to:  transform: translate(0px, -8px) rotate(-45deg);

        This will make the menu button rotate around its own center,  

PART 4: Menu Overlay & Responsiveness

Menu Overlay
_menu.scss

    //  Menu Overlay
    .menu {}
        position: fixed;
        top: 0;
        width: 100%;
        opacity: 0.9;
        visibility: hidden;

        //When menu clicked visibility:show
        &.show {}
            visibility: visable;

        //branding & nav
        //&-branding {}       //same as &menu-branding {} but because its nested in menu {} can omit menu
        &-branding, &-nav {}
            display: flex;
                display as flex ??
                make it into a column
            flex-flow: column wrap;
                going up and down aposed to right and left      ??
            align-items: center;
            justify-content: center;
                align both horizontally and vertically to the center
            float: left;
            width: 50%;     
            height: 100vh;
                100 slices   
            overflow: hidden;
                no scrollbars

        &-nav {}
            margin: 0;
            padding: 0;
            background: darken($primary-colour, 5); 
            list-style: none;       //remove link bullet points
            transform: translate3d(0, -100%, 0);
                take off the page
                put it at the top before it slides down
            @include easeOut;       //transition down

            &.show {}
                transform: translate3d(0, 0, 0);        //  Slide in from top

        //  Branding Side
        &-branding {}
            background: $primary-colour;
            transform: translate3d(0, 100%, 0);
            @include easeOut;

            &.show {}
                transform: translate3d(0, 0, 0);        //  Slide in from bottom

            .portrait {
                width: 250px;
                height: 250px;
                background: url("../img/portrait.jpg");
                border-radius: 50%;     //make it a circle
                border: solid 3px $secondary-colour;        //give it a border

        .nav-item {}
            transform: translate3d(600px, 0, 0);        //moving left/right
            @include easeOut;

            &.show {}
                transform: translate3d(0, 0, 0);        //  Slide in from right

    //Sass for loop
    //  Delay each nav item slide by 0.1s
    @for $x from 1 through 4 {}
        .nav-item:nth-child(#{$x}) {}      //have towrap $x var in #{}; temp literal
            transition-delay: $x * 0.1s; 

    .menu {}
        .nav-link {}
            display: inline-block;
            position: relative;
            font-size: 30px;
            text-transform: uppercase;
            padding: 1rem 0;
            font-weight: 300;
            color: #fff;
            text-decoration: none;
            @include easeOut;

index.html
    //  Add class current to home link
        <li class="nav-item current"><a href="/" class="nav-link"> Home </a></li>

_menu.scss
    .menu {}
        .nav-item {}
            &.current < a {}
                color: $secondary-colour;       //  make current page in nav menu secondary colour
        .nav-link {}
            &:hover {}
                color: $secondary-colour;       //  change link colour on hover

Responsiveness
_config.scss
    //  Media Query Mixins
    @mixin mediaSm {}
        @media screen and (max-width: 500px) {}     //  Will only apply if screen 500px or less
            @content;

    @mixin mediaMd {}
        @media screen and (max-width: 768px) {}
            @content;

    @mixin mediaLg {}
        @media screen and (min-width: 769px) and (max-width: 1170px) {}
            @content;

    @mixin mediaXl {}
        @media screen and (min-width: 1171px) {}
            @content;

Create new file called _mobile.scss
    @import "mobile";       //  import _mobile into main.scss
    restart npm sass;   ctrl + c to terminate

    _mobile.scss
        //  Widescreens
        @include mediaXl {}

        //  Desktop & Laptops
        @include mediaLg {}
            
        //  Tablets & Small Laptops
        @include mediaMd {}
            main {}
                align-items: center;
                text-align: center;

                .lg-heading {}
                    line-height: 1;
                    margin-bottom: 1rem;
        
        //  Smartphones
        @include mediaSm {}

    @include mediaMd {}
        main {}
            align-items: center;
            text-align: center;

            .lg-heading {}
                line-height: 1;
                margin-bottom: 1rem;

    @include mediaSm {}
        main#home h1 {}
            margin-top: 10vh;

    
    @include mediaMd {}
        ul.menu-nav, div.menu-branding {}
            float: none;
            width: 100%;
            min-height: 0;

            &.show {}
                transform: translate3d(0, 0, 0);

        .menu-nav {}
            height: 75vh;
            transform: translate3d(-100%, 0, 0);        //  Make it go off screen left/right
            font-size: 24px;

        .menu-branding {}
            height: 25vh;
            transform: translate3d(100%, 0, 0);

            .portrait {
                background: url("../img/portrait_small.jpg");
                width: 150px;
                height: 150px;

git
    git add .
    git commit -m 'Added media queries and made menu overlay responsive'