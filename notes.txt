PART 1: Intro & Sass Workflow Setup

terminal
    "mkdir project_name"
    "cd project_name"
    "code ."        open project in VScode
create dist folder
    folder incl files such as html, css, js, etc
create index.html file in dist folder
    type ! and enter tab to autocomplete HTML file
create scss folder
    work on sass workflow
    incl sass files
create main.scss file
    main sass file 
    every other sass file will be partials that we import into this file
node-sass
    need a way for our sass to be compiled into regular css because the browser doesnt read scss
    uses LibSass, the C version of the popular stylesheet preprocessor, very fast
    use npm to install node-sass => "npm install node-sass"
    before we install; need to create a package.json file; which is like a manifest for our project

    open terminal (ctrl + `); type "npm init"; follow steps
    anything installed throught npm will be put in the package.json file

    type "npm i node-sass" to install
        i = install;

Sass setup
    uses npm script 
    TEST
        change "test" script in package.json file
        from:   "scripts": {
                    "test": "echo \"Error: no test specified\" && exit 1"
                }

        to:     "sass": "echo \"Hello from sass script\""
        To run script open terminal type "npm run sass"

    "sass": "node-sass -w scss/ -o dist/css/ --recursive"
        node-sass       run node-sass
        -w scss/        watch the scss folder
        -o dist/css     output the compiled css file to dist/css/ (dont have to create dist/css/ folder) 
        --recursive     will have issues with partials and auto reload without recursive flag
    Terminal: npm run sass

main.sccs
    $primary-colour
        variables start with $
    dont touch main.css file that sass created
        work with main.scss file for styling with css
    Incl compiled version (main.css not main.scss) in the index.html file
        <link rel="stylesheet" href="css/main.css">

git repository
    open new terminal (+) and keep the npm terminal open
    create a file called .gitignore 
        touch .gitignore
            touch command creates a file
        windows powershell use "ni .gitignore"
            new-item .gitignore
    add "node-modules" to .gitignore file
        tells git to ignore node-modules folder
            no need to alter folder or upload to git
                node dependencies
    init git repository
        terminal: git init
            creates hidden .git folder
    terminal: git add .
        add . => add all files (. => all) 
    terminal: git commit -m 'Initial workflow setup'
        -m message/comment flag ??

PART 2: Homepage & Main Sass

homepage html markup
    HTML5 header tag
        menu
        overlay
    emmet ??
        btn-line*3  

    shift + alt + down
        copy lines down
    
    HTML5 main tag
        lg-heading = large heading
        sm-heading = small "
    fontawesome ??

    link to javascript in index.html file

core css    
    * {}
        box-sizing: border-box;
            border-box: padding on the inside doesnt effect width/height, be within the box model ??
    body {}
        height: 100%;
        margin: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
        line-height: 1.5;
            space between lines

    Headings:
    h1, h2, h3 {}
        margin: 0;
        font-weight: 400;
            font letter thickness
        sass nesting ??
            &.lg-heading {}
                font-size: 6rem;
                    rem => multiplier of default (16px)
                        change default rem size 
                            html {font-size: 10px;}
                    6rem = 6 * 16 = 96px
            &.sm-heading {}
                margin-bottom:2rem;
                padding: 0.2rem 1rem;
                background: rbga(lighten($primary-colour, 2) 0.5);
                    sass lighten() func ??
                        2 param
                            primary colour
                            how much to lighten by
                    sass rbga() func
                        make transparent
                        2 param
                            colour
                            opacity

    links
        a {}
            color: #fff;
                make colour white
            text-decoration: none
                remove links underline

    header
        header {}
            position: fixed
                always stay at top
            z-index: 2;
                always at front
            width: 100%
                streches across whole screen

    text-secondary
        create sass var
            $secondary-colour: #eece1a;
                yellow colour
        text-secondary {}
            color: $secondary-colour;

    main
        main {}
            padding: 4rem;
            height: 100%;
            nested sass: style icons
                .icons {}
                    margin-top: 1rem;
                        push down
                    nested sass: link
                        a {}
                            padding: 0.4rem;
                            nested sass: a hover
                                &:hover {}
                                    color: $secondary-colour;

CSS transitions
    transition: all 1s ease-out; ??
        all: what to transition e.g. colour
        1s: time it takes
        ease out: motion

    sass @mixin
        like func
            put at top
        @mixin easeOut {
            transition: all 1s ease-out;
        }
        to use
            @include nameOfMixin();
                e.g. @include easeOut();

homepage: id=homepage
    main {} nested  
        &#home {}
            overflow: hidden;
                no scroll bars
            nested h1
                h1 {}
                    margin-top: 20vh;
                        vh = viewpoint height
                            20vh = 20 out of the 100 slices the screen divided into
                            vw = similar
    create sass var
        $show-home-image = true;
        $home-image: url(.../img/background.jpg);
            create new folder in dist folder called img
                need
                    background.jpg
                    portrait
                    portrait-small
                    projects
        $background-opacity: 0.9;

    background image
        @mixin background {}
            @if $show-home-image {}
                &#bg-img {}
                    background: $home-image;
                    background-attachment: fixed; ??
                    background-size: cover;
                    METHOD1:    overlay
                        HTML: create overlay div at top body
                        .overlay {} //cover entire body
                            position: absolute;
                            top:0;
                            right:0;
                            width:100%;
                            height:100%;
                            z-index:-1;
                            background: rgba($primary-colour, $background-opacity);
                    METHOD2
                        pseudo-element after
                        &:after {}
                            content:''; // :before/:after need content but can leave empty ''
                            position: absolute;
                            top:0;
                            right:0;
                            width:100%;
                            height:100%;
                            z-index:-1;
                            background: rgba($primary-colour, $background-opacity);
        body {}
            @include background; //dont need parenthasies ??

create partial scss file for @mixin functions
    all partials should start with underscore _
    create file called _config.scss
    move all $var and @mixin func to _config.scss
    import config into main scss file   
        @import 'config';
            no underscore _
            no filetype scss

PART 3: Rotating Menu Button

git
    git add .
    git commit -m 'Index markup & main sass'